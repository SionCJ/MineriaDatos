/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mineriadatos;

import general.Transformacion;
import java.awt.BorderLayout;
import java.awt.Graphics;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Enumeration;
import java.util.Vector;
import java.util.jar.Attributes;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import weka.classifiers.Evaluation;
import weka.classifiers.trees.J48;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.AttributeStats;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.Utils;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;
import weka.filters.unsupervised.attribute.Remove;

public class Ventana extends javax.swing.JFrame {
    Instances trainJ48;
    private OpcionesClasificador opcClasificador;
    private OpcionesCluster opcCluster;
    private Instances trainKmeans;
    private String strArchivo;
    private double[] valoresX, valoresY;
    
    public Ventana() {
        initComponents();
        opcClasificador = new OpcionesClasificador(true, 1, 2, 1);
        opcCluster = new OpcionesCluster(3, 300, 1);
        btnRemover.setVisible(false);
        setIconImage( new javax.swing.ImageIcon( getClass().getResource("recursos/icon.png") ).getImage() );
        
        tblAtributos.addMouseListener(new MouseAdapter() 
        {
            public void mouseClicked(MouseEvent e) 
            {
                int fila = tblAtributos.rowAtPoint(e.getPoint());
                if( rdbtnJ48.isSelected() )
                    Estadisticas(trainJ48, fila);
                else
                    Estadisticas(trainKmeans, fila);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        pnlNorte = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        btnCargar = new javax.swing.JButton();
        lblConjunto = new javax.swing.JLabel();
        lblNumAtributos = new javax.swing.JLabel();
        lblNumInst = new javax.swing.JLabel();
        lblClase = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblAtributos = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblClases = new javax.swing.JTable();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblPreproces = new javax.swing.JTable();
        btnDiscretizar = new javax.swing.JToggleButton();
        btnRemover = new javax.swing.JToggleButton();
        pnlClasificar = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        rdbtnJ48 = new javax.swing.JRadioButton();
        rbtnKMeans = new javax.swing.JRadioButton();
        btnOpcionesClasificador = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        lblCross = new javax.swing.JLabel();
        lblFolds = new javax.swing.JLabel();
        spinFolds = new javax.swing.JSpinner();
        lblPorciento = new javax.swing.JLabel();
        btnEntrenar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCrossVal = new javax.swing.JTable();
        pnlVisualizar = new javax.swing.JPanel();
        grafica = new mineriadatos.Grafica();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cmboxAtributoX = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        cmboxAtributoY = new javax.swing.JComboBox();
        btnGraficar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mineria de Datos");
        setMinimumSize(new java.awt.Dimension(900, 680));
        setPreferredSize(new java.awt.Dimension(1100, 700));

        pnlNorte.setPreferredSize(new java.awt.Dimension(600, 210));
        pnlNorte.setLayout(new javax.swing.BoxLayout(pnlNorte, javax.swing.BoxLayout.LINE_AXIS));

        jPanel1.setPreferredSize(new java.awt.Dimension(400, 150));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        btnCargar.setText("Cargar Archivo");
        btnCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        jPanel1.add(btnCargar, gridBagConstraints);

        lblConjunto.setText("Conjunto: ");
        lblConjunto.setPreferredSize(new java.awt.Dimension(200, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        jPanel1.add(lblConjunto, gridBagConstraints);

        lblNumAtributos.setText("Numero de Atributos:");
        lblNumAtributos.setPreferredSize(new java.awt.Dimension(150, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        jPanel1.add(lblNumAtributos, gridBagConstraints);

        lblNumInst.setText("Numero de instancias:");
        lblNumInst.setPreferredSize(new java.awt.Dimension(150, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        jPanel1.add(lblNumInst, gridBagConstraints);

        lblClase.setText("Clase: ");
        lblClase.setPreferredSize(new java.awt.Dimension(90, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        jPanel1.add(lblClase, gridBagConstraints);

        jScrollPane3.setPreferredSize(new java.awt.Dimension(200, 140));

        tblAtributos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null}
            },
            new String [] {
                "Atributos"
            }
        ));
        jScrollPane3.setViewportView(tblAtributos);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.9;
        jPanel1.add(jScrollPane3, gridBagConstraints);

        jScrollPane4.setPreferredSize(new java.awt.Dimension(200, 140));

        tblClases.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null}
            },
            new String [] {
                "Clases (valores)"
            }
        ));
        jScrollPane4.setViewportView(tblClases);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        jPanel1.add(jScrollPane4, gridBagConstraints);

        pnlNorte.add(jPanel1);

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Preprocesamiento"));
        jPanel11.setMinimumSize(new java.awt.Dimension(60, 56));
        jPanel11.setPreferredSize(new java.awt.Dimension(600, 50));

        jScrollPane5.setPreferredSize(new java.awt.Dimension(470, 180));

        tblPreproces.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null}
            },
            new String [] {
                "Preprocesamiento"
            }
        ));
        jScrollPane5.setViewportView(tblPreproces);

        jPanel11.add(jScrollPane5);

        btnDiscretizar.setText("Discretizar");
        btnDiscretizar.setEnabled(false);
        btnDiscretizar.setPreferredSize(new java.awt.Dimension(85, 23));
        btnDiscretizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDiscretizarActionPerformed(evt);
            }
        });
        jPanel11.add(btnDiscretizar);

        btnRemover.setText("Remover");
        btnRemover.setEnabled(false);
        btnRemover.setPreferredSize(new java.awt.Dimension(85, 23));
        btnRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverActionPerformed(evt);
            }
        });
        jPanel11.add(btnRemover);

        pnlNorte.add(jPanel11);

        getContentPane().add(pnlNorte, java.awt.BorderLayout.NORTH);

        pnlClasificar.setBorder(javax.swing.BorderFactory.createTitledBorder("Clasificacion"));
        pnlClasificar.setMinimumSize(new java.awt.Dimension(300, 0));
        pnlClasificar.setPreferredSize(new java.awt.Dimension(600, 515));
        pnlClasificar.setLayout(new java.awt.BorderLayout());

        jPanel7.setMinimumSize(new java.awt.Dimension(60, 56));
        jPanel7.setPreferredSize(new java.awt.Dimension(350, 70));
        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 15, 5));

        buttonGroup1.add(rdbtnJ48);
        rdbtnJ48.setSelected(true);
        rdbtnJ48.setText("Arbol C4.5");
        rdbtnJ48.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbtnJ48ActionPerformed(evt);
            }
        });
        jPanel7.add(rdbtnJ48);

        buttonGroup1.add(rbtnKMeans);
        rbtnKMeans.setText("K-Means");
        rbtnKMeans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnKMeansActionPerformed(evt);
            }
        });
        jPanel7.add(rbtnKMeans);

        btnOpcionesClasificador.setText("Opciones");
        btnOpcionesClasificador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpcionesClasificadorActionPerformed(evt);
            }
        });
        jPanel7.add(btnOpcionesClasificador);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Validacion"));
        jPanel8.setMinimumSize(new java.awt.Dimension(60, 53));
        jPanel8.setPreferredSize(new java.awt.Dimension(200, 70));

        lblCross.setText("Cross validation");
        lblCross.setPreferredSize(new java.awt.Dimension(130, 14));
        jPanel8.add(lblCross);

        lblFolds.setText("Folds");
        jPanel8.add(lblFolds);

        spinFolds.setModel(new javax.swing.SpinnerNumberModel(10, 2, null, 1));
        spinFolds.setPreferredSize(new java.awt.Dimension(60, 20));
        jPanel8.add(spinFolds);
        jPanel8.add(lblPorciento);

        jPanel7.add(jPanel8);

        btnEntrenar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnEntrenar.setForeground(new java.awt.Color(0, 102, 204));
        btnEntrenar.setText("Entrenar");
        btnEntrenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEntrenarActionPerformed(evt);
            }
        });
        jPanel7.add(btnEntrenar);

        pnlClasificar.add(jPanel7, java.awt.BorderLayout.PAGE_START);

        jScrollPane1.setMinimumSize(new java.awt.Dimension(23, 300));

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        pnlClasificar.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder("Resultados de Cross Validation"));
        jScrollPane2.setPreferredSize(new java.awt.Dimension(452, 100));

        tblCrossVal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "", "Instancias", "Porcentaaje"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblCrossVal);

        pnlClasificar.add(jScrollPane2, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(pnlClasificar, java.awt.BorderLayout.EAST);

        pnlVisualizar.setBorder(javax.swing.BorderFactory.createTitledBorder("Visualizacion"));
        pnlVisualizar.setLayout(new java.awt.BorderLayout());

        grafica.setNombreEjeX("Atributo X");
        grafica.setNombreEjeY("Atributo Y");
        grafica.setRejilla(false);
        pnlVisualizar.add(grafica, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Atributo X");
        jLabel1.setPreferredSize(new java.awt.Dimension(100, 14));
        jPanel2.add(jLabel1);

        cmboxAtributoX.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ninguno" }));
        cmboxAtributoX.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmboxAtributoXItemStateChanged(evt);
            }
        });
        jPanel2.add(cmboxAtributoX);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Atributo Y");
        jLabel2.setPreferredSize(new java.awt.Dimension(100, 14));
        jPanel2.add(jLabel2);

        cmboxAtributoY.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ninguno" }));
        cmboxAtributoY.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmboxAtributoYItemStateChanged(evt);
            }
        });
        jPanel2.add(cmboxAtributoY);

        btnGraficar.setText("Graficar");
        btnGraficar.setEnabled(false);
        btnGraficar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGraficarActionPerformed(evt);
            }
        });
        jPanel2.add(btnGraficar);

        pnlVisualizar.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(pnlVisualizar, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEntrenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEntrenarActionPerformed
        try{
            Instances prueba;
            String buffer = "" ;
            if( rdbtnJ48.isSelected() ){
                if( trainJ48==null )
                    throw new FileNotFoundException("No se ha cargado el conjunto de entrenamiento");
                buffer = DescripcionClasificador(trainJ48);
                J48 j48 = new J48();
                j48.setUnpruned( opcClasificador.tipoArbol );
                j48.setConfidenceFactor(opcClasificador.factor );
                j48.setMinNumObj( opcClasificador.minInstancias );
                j48.setSeed( opcClasificador.semilla );
                
                Evaluation eval=new Evaluation(trainJ48);
                eval.crossValidateModel(j48, trainJ48, 10, new java.util.Random(1));
//                System.out.println("Percent correct: "+ Double.toString(eval.pctCorrect()));
//                System.out.println("Evaluacion: "+ eval.toString());
                buffer += "Porcentaje correcto: "+ Double.toString(eval.pctCorrect())+"\n";
                j48.buildClassifier(trainJ48);
                buffer += "\n"+j48.toString();
                
                String[][] cross = new String[3][3];
                cross[0][0] = "Clasificacion correcta";     cross[0][1] = ""+eval.correct();     cross[0][2] = ""+eval.pctCorrect()+" %";
                cross[1][0] = "Clasificacion incorrecta";     cross[1][1] = ""+eval.incorrect();     cross[1][2] = ""+eval.pctCorrect()+" %";
                cross[2][0] = "Sin clasificacion";     cross[2][1] = ""+eval.unclassified();     cross[2][2] = ""+eval.pctUnclassified()+" %";
                tblCrossVal.setModel(new DefaultTableModel(cross, new String[]{"","Instancias", "Procentaje"}));
            }else{
                if( trainKmeans==null )
                    throw new FileNotFoundException("No se ha cargado la el conjunto de entrenamiento");
                buffer = DescripcionCluster(trainKmeans);
                SimpleKMeans kmeans = new SimpleKMeans();
//                System.out.println("Grupos="+opcCluster.numGrupos);
//                System.out.println("Iteraciones="+opcCluster.numIter);
                kmeans.setNumClusters(opcCluster.numGrupos);
                kmeans.setMaxIterations(opcCluster.numIter);
                kmeans.buildClusterer(trainKmeans);
                
                int cluster;
                int[] tamanoClusters = kmeans.getClusterSizes();
                Instances centroides = kmeans.getClusterCentroids();
                Instance centroide;
                System.out.println("Centroides k-means ...");
                for(cluster=0; cluster < kmeans.numberOfClusters(); cluster++){
                    centroide = centroides.instance(cluster);
                    buffer += "Cluster "+cluster+" ("+tamanoClusters[cluster]+" instancias): \n";
                    buffer += "Centroide["+centroide.toString()+"]";
//                    System.out.print("Cluster "+cluster+" ("+tamanoClusters[cluster]+" instancias): ");
//                    System.out.println("Centroide["+centroide.toString()+"]");                
                }
//                System.out.println();
//                System.out.println(kmeans);
                buffer += "\n"+kmeans.toString();
                
                String[][] cross = new String[3][3];
                for(String[] ss: cross)
                    for(String s: ss)
                        s = "";
                tblCrossVal.setModel(new DefaultTableModel(cross, new String[]{"","Instancias", "Procentaje"}));
            }
            jTextArea1.setText("");
            jTextArea1.append(buffer);
//            System.out.println(j48);
//            JFrame v = new JFrame();
//            ResultHistoryPanel pnlHistory = new ResultHistoryPanel(jTextArea1);
//            v.add(pnlHistory);
//            pnlHistory.addResult("Titulo", new StringBuffer().append(j48.toString()));
//            v.setVisible(true);
        }catch(FileNotFoundException ex){
            JOptionPane.showMessageDialog(btnEntrenar, ex.getMessage(),"Error", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnEntrenarActionPerformed

    private void btnCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarActionPerformed
        // LEER ARCHIVO
         strArchivo = "";
        JFileChooser explorador = new JFileChooser("arff");
        explorador.setDialogTitle("Abrir archivo...");
        explorador.setFileFilter(new FileNameExtensionFilter("Archivo arff", "arff"));
        int opcion = explorador.showOpenDialog(this);
        if( opcion==JFileChooser.APPROVE_OPTION ){
            strArchivo = explorador.getSelectedFile().getPath();
//            System.out.println("Nombre Archivo: "+strArchivo);
        }
        else if( opcion==JFileChooser.CANCEL_OPTION ){
            JOptionPane.showMessageDialog(null, "Cancelado");
            return;
        }
        
        BufferedReader buffreader = null;
        try {
            // CARGAR ARCHIVO
            buffreader = new BufferedReader( new FileReader(strArchivo) );
            trainJ48 = new Instances(buffreader);
            buffreader = new BufferedReader( new FileReader(strArchivo) );
            trainKmeans = new Instances(buffreader);
            trainJ48.setClassIndex(trainJ48.numAttributes()-1);
            
            // CARGANDO MODELOS
            cargarModelos();
            
            lblConjunto.setText("Conjunto: "+trainJ48.relationName());
            lblNumAtributos.setText("Numero de atributos:"+trainJ48.numAttributes());
            lblNumInst.setText("Numero de instancias: "+trainJ48.numInstances());
            if( rdbtnJ48.isSelected() )
                lblClase.setText("Clase: "+trainJ48.classAttribute().name());
            
            btnDiscretizar.setEnabled(true);
            btnRemover.setEnabled(true);
            btnGraficar.setEnabled(true);
            
            Estadisticas(trainJ48, 0);
            grafica.setNombreEjeX((String) cmboxAtributoX.getSelectedItem());
            grafica.setNombreEjeX((String) cmboxAtributoX.getSelectedItem());
            this.update( grafica.getGraphics() );
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Archvo no encontrado");
        } catch (IOException ex) {
            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
        }finally{
            try {
                if( buffreader!=null )
                    buffreader.close();
            } catch (IOException ex) {
                Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnCargarActionPerformed

    private void btnOpcionesClasificadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpcionesClasificadorActionPerformed
        //JDialog dialog = new javax.swing.JDialog(new FrameOpcionesClasificador(this), "V", true);
        
        if( rdbtnJ48.isSelected() ){
            DialogClasificador dialog = new DialogClasificador(this, true);
            dialog.setVisible(true);
//            System.out.println("Clasificador: "+opcClasificador);
        }
        else{
            DialogCluster dialog = new DialogCluster(this, true);
            dialog.setVisible(true);
//            System.out.println("Cluster: "+opcCluster);
        }
    }//GEN-LAST:event_btnOpcionesClasificadorActionPerformed

    private void rdbtnJ48ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbtnJ48ActionPerformed
        spinFolds.setEnabled(true);
        btnDiscretizar.setVisible(true);
        btnRemover.setVisible(false);
    }//GEN-LAST:event_rdbtnJ48ActionPerformed

    private void rbtnKMeansActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnKMeansActionPerformed
        spinFolds.setEnabled(false);
        btnDiscretizar.setVisible(false);
        btnRemover.setVisible(true);
    }//GEN-LAST:event_rbtnKMeansActionPerformed

    private void btnDiscretizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDiscretizarActionPerformed
        BufferedReader buffreader = null;
        try{
            buffreader = new BufferedReader( new FileReader(strArchivo) );
            trainJ48 = new Instances(buffreader);
            trainJ48.setClassIndex(trainJ48.numAttributes()-1);
            if( btnDiscretizar.isSelected() ){
                btnDiscretizar.setText("desDiscretizar");
                Discretize filtro = new Discretize();
                filtro.setInputFormat(trainJ48);
                trainJ48 = Filter.useFilter(trainJ48, filtro);
                
            }
            else{
                btnDiscretizar.setText("Discretizar");
            }
            Estadisticas(trainJ48, 0);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "No se pudo discretizar");
            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
        }finally{
            if( buffreader!=null )
                try {
                    buffreader.close();
            } catch (IOException ex) {
                Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnDiscretizarActionPerformed

    private void cmboxAtributoXItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmboxAtributoXItemStateChanged
        grafica.setNombreEjeX( ""+cmboxAtributoX.getSelectedItem() );
        this.update( grafica.getGraphics() );
    }//GEN-LAST:event_cmboxAtributoXItemStateChanged

    private void cmboxAtributoYItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmboxAtributoYItemStateChanged
        grafica.setNombreEjeY( ""+cmboxAtributoY.getSelectedItem() );
        this.update( grafica.getGraphics() );
    }//GEN-LAST:event_cmboxAtributoYItemStateChanged

    private void btnRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverActionPerformed
        BufferedReader buffreader = null;
        try{
            buffreader = new BufferedReader( new FileReader(strArchivo) );
            trainKmeans = new Instances(buffreader);
            if( btnRemover.isSelected() ){
                btnRemover.setText("desRemover");
                Remove remove = new Remove();
                remove.setOptions(new String[]{"-R","1"});
                remove.setInputFormat(trainKmeans);
                trainKmeans = Filter.useFilter(trainKmeans, remove); 
            }
            else
                btnRemover.setText("Remover");
            Estadisticas(trainKmeans, 0);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "No se pudo discretizar");
            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
        }finally{
            if( buffreader!=null )
                try {
                    buffreader.close();
            } catch (IOException ex) {
                Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnRemoverActionPerformed

    private void btnGraficarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGraficarActionPerformed
        int x = cmboxAtributoX.getSelectedIndex();
        int y = cmboxAtributoY.getSelectedIndex();
        Instances data;
        if( rdbtnJ48.isSelected() )
            data = trainJ48;
        else
            data = trainKmeans;
        valoresX = data.attributeToDoubleArray(x);
        valoresY = data.attributeToDoubleArray(y);

        double minX=Double.MAX_VALUE, maxX=Double.MIN_VALUE;
        double minY=Double.MAX_VALUE, maxY=Double.MIN_VALUE;
//                    System.out.println("\nBuscando minMax en X");
        for(double v: valoresX ){
            if( v<minX )
                minX = v;
            if( v>maxX)
                maxX = v;
        }
//                    System.out.println("Buscando minMax en Y");
        for(double v: valoresY ){
            if( v<minY )
                minY = v;
            if( v>maxY)
                maxY = v;
        }

                    System.out.println("Graficando...");
        grafica.setPuerto(minX, maxX, minY, maxY);
        //this.update( grafica.getGraphics() );
        this.repaint();
    }//GEN-LAST:event_btnGraficarActionPerformed

    @Override
    public void paint(Graphics g){
        super.paint(g);
        try{
        if( trainJ48!=null && valoresX!=null ){
            Graphics graph = grafica.getGraphics();
            graph.setColor(java.awt.Color.black);
            grafica.setGraph(graph);
            //graph.drawLine(0, 0, grafica.getWidth(), grafica.getHeight());
            for(int i=0; i<valoresX.length; i++ ){
                //System.out.println("\tGraficando punto "+i+" -> ( "+valoresX[i]+" , "+valoresY[i]+")");
                grafica.drawPoint(valoresX[i], valoresY[i], 2);
            }
        }
        }catch(Exception e){
            e.printStackTrace();
        }
    }
    public String DescripcionClasificador(Instances data){
        String buffer = "Conjunto de Datos:\t"+data.relationName()+"\nContiene:\n";
        buffer += "    "+data.numAttributes()+" atributos\n";
        weka.core.Attribute a = data.classAttribute();
        Enumeration e = a.enumerateValues();
        for(int i=0; i<data.numAttributes(); i++)
            buffer += "\t- "+data.attribute(i).name()+"\n";
        buffer += "     "+data.numInstances()+" instancias\n";
        buffer += "     "+data.numClasses()+" clases\n";
        while( e.hasMoreElements() )
            buffer += "\t- "+e.nextElement().toString()+"\n";
        buffer += "\n";
        return buffer;
    }
    public void MouseClicked(MouseEvent e){
       int row = tblAtributos.rowAtPoint(e.getPoint());
//       if( rdbtnJ48.isSelected() )
//            Estadisticas(trainJ48, )
       JOptionPane.showMessageDialog(null, "Fila: "+row);
    }
    
    public String DescripcionCluster(Instances data){
        String buffer = "Conjunto de Datos:\t"+data.relationName()+"\nContiene:\n";
        buffer += "    "+data.numAttributes()+" atributos\n";
        for(int i=0; i<data.numAttributes(); i++)
            buffer += "\t- "+data.attribute(i).name()+"\n";
        buffer += "     "+data.numInstances()+" instancias\n";
        buffer += "\n";
        return buffer;
    }
    
    @SuppressWarnings("empty-statement")
    private void cargarModelos(){
        int numAtributos = trainJ48.numAttributes();
        
        String[][] atributos = new String[numAtributos][1];
        String[] atribCmbox = new String[numAtributos];
        for(int i=0; i<numAtributos; i++){
            atributos[i][0] = trainJ48.attribute(i).name();
            atribCmbox[i] = trainJ48.attribute(i).name();
            System.out.println(trainJ48.attribute(i).name());
        }
        tblAtributos.setModel( new DefaultTableModel(atributos, new String[]{"Atributo"}) );
        cmboxAtributoX.setModel(new javax.swing.DefaultComboBoxModel(atribCmbox));
        cmboxAtributoY.setModel(new javax.swing.DefaultComboBoxModel(atribCmbox));
        
        int i;
        Enumeration clase = trainJ48.classAttribute().enumerateValues();
        for(i=0; clase.hasMoreElements(); i++ )
            clase.nextElement();
        clase = trainJ48.classAttribute().enumerateValues();
        String[][] clases = new String[i][1];
        for(i=0; clase.hasMoreElements(); i++ )
            clases[i][0] = clase.nextElement().toString();
        tblClases.setModel( new DefaultTableModel(clases, new String[]{"Clases (valores)"}) );
    }
    
    private void Estadisticas(Instances data, int index){
        if( data.attribute(index).isNumeric() ){
            //JOptionPane.showMessageDialog(null, "Es numerico");
//            double min=Double.MAX_VALUE, max=Double.MIN_VALUE, media, sum=0;
//            double[] valores = data.attributeToDoubleArray(index);
//            for(double v: valores){
//                if( min<v )
//                    min = v;
//                if( max> v)
//                    max = v;
//                sum += v;
//            }
//            media = sum/valores.length;
            String[][] datos = new String[3][2];
            AttributeStats as = data.attributeStats(index);
            
            datos[0][0] = "Minimo";     datos[0][1] = Utils.doubleToString(as.numericStats.min, 3);
            datos[1][0] = "Maximo";     datos[1][1] = Utils.doubleToString(as.numericStats.max, 3);
            datos[2][0] = "Media";      datos[2][1] = Utils.doubleToString(as.numericStats.mean, 3);;
            tblPreproces.setModel(new DefaultTableModel(datos, new String[]{"Estadistico", "Valor"}));
        }
        else if( data.attribute(index).isNominal() ){
            Vector< Vector<String> > datos = new Vector();
            AttributeStats atribStats = data.attributeStats(index);
            for (int i = 0; i < atribStats.nominalCounts.length; i++) {
                datos.add( new Vector<String>() );
                datos.elementAt(i).add( data.attribute(index).value(i) );
                datos.elementAt(i).add( ""+atribStats.nominalCounts[i] );
            }
            
            System.out.println("Instancia 0: "+data.instance(0).value(0) );
            Vector<String> nombCols = new Vector();
            nombCols.add("Intervalo");
            nombCols.add("Num de Instancias");
            tblPreproces.setModel(new DefaultTableModel(datos, nombCols));
        }
    }
    
    void setOpcionesClasificador(OpcionesClasificador opcionesClasificador) {
        opcClasificador = opcionesClasificador;
    }
    void setOpcionesCluster(OpcionesCluster opcionesCluster) {
        opcCluster = opcionesCluster;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCargar;
    private javax.swing.JToggleButton btnDiscretizar;
    private javax.swing.JButton btnEntrenar;
    private javax.swing.JButton btnGraficar;
    private javax.swing.JButton btnOpcionesClasificador;
    private javax.swing.JToggleButton btnRemover;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmboxAtributoX;
    private javax.swing.JComboBox cmboxAtributoY;
    private mineriadatos.Grafica grafica;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel lblClase;
    private javax.swing.JLabel lblConjunto;
    private javax.swing.JLabel lblCross;
    private javax.swing.JLabel lblFolds;
    private javax.swing.JLabel lblNumAtributos;
    private javax.swing.JLabel lblNumInst;
    private javax.swing.JLabel lblPorciento;
    private javax.swing.JPanel pnlClasificar;
    private javax.swing.JPanel pnlNorte;
    private javax.swing.JPanel pnlVisualizar;
    private javax.swing.JRadioButton rbtnKMeans;
    private javax.swing.JRadioButton rdbtnJ48;
    private javax.swing.JSpinner spinFolds;
    private javax.swing.JTable tblAtributos;
    private javax.swing.JTable tblClases;
    private javax.swing.JTable tblCrossVal;
    private javax.swing.JTable tblPreproces;
    // End of variables declaration//GEN-END:variables

}
